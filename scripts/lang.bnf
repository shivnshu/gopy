Start : PackageClause stmt_end ImportDeclList TopLevelDeclList

PackageClause  : keyword_package PackageName

PackageName    : identifier

ImportPath     : string_literal

ImportSpec     : ImportPath
               | dot ImportPath
               | PackageName ImportPath

ImportList     : empty
               | ImportList ImportSpec stmt_end

ImportDecl     : keyword_import ImportSpec
               | keyword_import left_paren ImportList right_paren

ImportDeclList : empty
               | ImportDeclList ImportDecl stmt_end

TopLevelDeclList : empty
                 | TopLevelDeclList TopLevelDecl stmt_end

TopLevelDecl : Declaration
             | FunctionDecl
             | MethodDecl

FunctionDecl : keyword_func FunctionName Function
             | keyword_func FunctionName Signature

FunctionName : identifier

MethodDecl : keyword_func Receiver MethodName Function
           | keyword_func Receiver MethodName Signature

Receiver : Parameters

Declaration : ConstDecl
            | TypeDecl
            | VarDecl

ConstDecl : keyword_const ConstGroup

ConstGroup : ConstSpec
           | left_paren ConstSpecList right_paren

ConstSpecList : empty
              | ConstSpecList ConstSpec stmt_end

ConstSpec : IdentifierList Type '=' IdentifierList

IdentifierList : identifier
               | IdentifierList comma identifier

TypeDecl  : keyword_type TypeSpecGroup

TypeSpecGroup : TypeSpec
              | left_paren TypeSpecList right_paren

TypeSpecList : empty
             | TypeSpecList TypeSpec stmt_end

TypeSpec     : AliasDecl
             | TypeDef

AliasDecl    : identifier '=' Type

TypeDef      : identifier Type

Type      : TypeName
          | TypeLit
          | left_paren Type right_paren

TypeName  : identifier
          | QualifiedIdent

TypeLit   : ArrayType
          | StructType
          | PointerType
          | FunctionType
          | InterfaceType
          | SliceType
          | MapType

ArrayType   : left_sq_paren ArrayLength right_sq_paren ElementType

ArrayLength : Expression

ElementType : Type

SliceType : left_sq_paren right_sq_paren ElementType

StructType    : keyword_struct left_block_bracket FieldDeclList right_block_bracket

FieldDeclList : empty
              | FieldDeclList FieldDecl stmt_end

FieldDecl     : IdentifierList Type
              | EmbeddedField

EmbeddedField : '*' TypeName
              | TypeName

PointerType : '*' BaseType

BaseType    : Type

FunctionType   : keyword_func Signature

Signature      : Parameters ParametersList Result
               | Parameters ParametersList

ParametersList : empty
               | ParametersList Parameters

Result         : Type

Parameters     : left_paren ParameterList comma right_paren
               | left_paren ParameterList right_paren
               | left_paren right_paren

ParameterList  : ParameterDecl
               | ParameterList comma ParameterDecl

ParameterDecl  : Type
               | spread_op Type
               | IdentifierList Type
               | IdentifierList spread_op Type

InterfaceType      : keyword_interface left_block_bracket MethodSpecList right_block_bracket

MethodSpecList : empty
               | MethodSpecList MethodSpec stmt_end

MethodSpec         : MethodName Signature
                   | InterfaceTypeName

MethodName         : identifier

InterfaceTypeName  : TypeName

MapType     : keyword_map left_sq_paren KeyType right_sq_paren ElementType

KeyType     : Type

QualifiedIdent : PackageName dot identifier

VarDecl     : keyword_var VarSpec
            | keyword_var left_paren VarSpecList right_paren

VarSpecList : empty
            | VarSpecList VarSpec stmt_end

VarSpec     : IdentifierList ExpressionListGroup

ExpressionListGroup : Type
                    | Type '=' ExpressionList
                    | '=' ExpressionList

Operand     : Literal
            | OperandName
            | MethodExpr
            | left_paren Expression right_paren

OperandName : identifier
            | QualifiedIdent

Literal     : BasicLit
            | CompositeLit
            | FunctionLit

BasicLit    : int_lit
            | float_lit
            | rune_lit
            | string_literal

CompositeLit : LiteralType LiteralValue

LiteralType : StructType
            | ArrayType
            | left_sq_paren spread_op right_sq_paren ElementType
            | SliceType
            | MapType
            | TypeName

LiteralValue : left_block_bracket right_block_bracket
             | left_block_bracket ElementList right_block_bracket
             | left_block_bracket ElementList comma right_block_bracket

ElementList : KeyedElement
            | ElementList comma KeyedElement

KeyedElement : Element
             | Key label_op Element

Key          : FieldName
             | Expression
             | LiteralValue

FieldName    : identifier

Element      : Expression
             | LiteralValue

FunctionLit  : keyword_func Function

Function     : Signature FunctionBody

FunctionBody : Block

Block        : left_block_bracket StatementList right_block_bracket

StatementList : empty
              | StatementList Statement stmt_end

Statement    : Declaration
             | LabeledStmt
             | SimpleStmt
             | ReturnStmt
             | BreakStmt
             | ContinueStmt
             | GotoStmt
             | FallthroughStmt
             | Block
             | IfStmt
             | SwitchStmt
             | ForStmt
             | DeferStmt

LabeledStmt : Label label_op Statement

Label       : identifier

SimpleStmt : EmptyStmt
           | ExpressionStmt
           | IncDecStmt
           | Assignment
           | ShortVarDecl

EmptyStmt : empty

ExpressionStmt : Expression

IncDecStmt : Expression inc_dec_op

Assignment : ExpressionList assign_op ExpressionList

ShortVarDecl : IdentifierList ':=' ExpressionList

ReturnStmt : keyword_return
           | keyword_return ExpressionList

BreakStmt  : keyword_break
           | keyword_break Label

ContinueStmt : keyword_continue
             | keyword_continue Label

GotoStmt : keyword_goto Label

FallthroughStmt : keyword_fallthrough

IfStmt : keyword_if Expression Block
       | keyword_if SimpleStmt stmt_end Expression Block
       | keyword_if Expression Block keyword_else IfStmtGrp
       | keyword_if SimpleStmt stmt_end Expression Block keyword_else IfStmtGrp

IfStmtGrp : IfStmt
          | Block

SwitchStmt : ExprSwitchStmt

ExprSwitchStmt : keyword_switch left_block_bracket ExprCaseClauseList right_block_bracket
               | keyword_switch SimpleStmt stmt_end left_block_bracket ExprCaseClauseList right_block_bracket
               | keyword_switch Expression left_block_bracket ExprCaseClauseList right_block_bracket
               | keyword_switch SimpleStmt stmt_end Expression left_block_bracket ExprCaseClauseList right_block_bracket

ExprCaseClauseList : empty
                   | ExprCaseClauseList ExprCaseClause

ExprCaseClause : ExprSwitchCase label_op StatementList

ExprSwitchCase : keyword_case ExpressionList
               | keyword_default

ForStmt : keyword_for Block
        | keyword_for ConditionGrp Block

ConditionGrp : Condition
             | ForClause
             | RangeClause

Condition : Expression

ForClause : stmt_end stmt_end
          | InitStmt stmt_end stmt_end
          | stmt_end Condition stmt_end
          | stmt_end stmt_end PostStmt
          | InitStmt stmt_end Condition stmt_end
          | stmt_end Condition stmt_end PostStmt
          | InitStmt stmt_end stmt_end PostStmt
          | InitStmt stmt_end Condition stmt_end PostStmt

InitStmt : SimpleStmt

PostStmt : SimpleStmt

RangeClause : keyword_range Expression
            | ExpressionList '=' keyword_range Expression
            | IdentifierList ':=' keyword_range Expression

DeferStmt : keyword_defer Expression

ExpressionList : Expression
               | ExpressionList comma Expression

Expression : UnaryExpr
           | Expression binary_op Expression

UnaryExpr : PrimaryExpr
          | unary_op UnaryExpr

PrimaryExpr : Operand
            | Conversion
            | ForCompExpr
            | PrimaryExpr Selector
            | PrimaryExpr Index
            | PrimaryExpr Slice
            | PrimaryExpr TypeAssertion
            | PrimaryExpr Arguments

Conversion : Type left_paren Expression right_paren
           | Type left_paren Expression comma right_paren

MethodExpr : ReceiverType dot MethodName

ReceiverType : TypeName
             | left_paren '*' TypeName right_paren
             | left_paren ReceiverType right_paren

ForCompExpr : left_sq_paren Expression '|' RangeClause right_sq_paren

Selector : dot identifier

Index : left_sq_paren Expression right_sq_paren

Slice : left_sq_paren label_op right_sq_paren
      | left_sq_paren Expression label_op right_sq_paren
      | left_sq_paren label_op Expression right_sq_paren
      | left_sq_paren Expression label_op Expression right_sq_paren
      | left_sq_paren label_op Expression label_op Expression right_sq_paren
      | left_sq_paren Expression label_op Expression label_op Expression right_sq_paren

TypeAssertion : dot left_paren Type right_paren

Arguments : left_paren right_paren
          | left_paren ArgIerGroup right_paren

ArgIerGroup : ExpressionList
              | ExpressionList spread_op
              | ExpressionList comma
              | ExpressionList spread_op comma
              | Type
              | Type spread_op
              | Type comma
              | Type spread_op comma
              | Type comma ExpressionList
              | Type comma ExpressionList spread_op
              | Type comma ExpressionList comma
              | Type comma ExpressionList spread_op comma
