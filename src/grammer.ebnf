!whitespace : ' ' | '\t' | '\n' | '\r' ;
!comment : _lineComment | _blockComment ;
_lineComment : '/' '/' {.} '\n' ;
_blockComment : '/' '*' {. | '*'} '*' '/' ;

/* Production Rules */

_newline      : '\x0A' ;
_ascii_char   : '\x00'-'\x09' | '\x0B'-'\x21' | '\x23'-'\x26' | '\x28'-'\x59' | '\x61'-'\xFF' ;
_ascii_letter : 'a'-'z' | 'A'-'Z' ;
_ascii_digit  : '0'-'9' ;

_letter                : _ascii_letter | '_' ;
_decimal_digit_wo_zero : '1'-'9' ;
_decimal_digit         : '0' | _decimal_digit_wo_zero ;
_octal_digit           : '0' - '7' ;
_hex_digit             : '0' - '9' | 'A' - 'F' | 'a' - 'f' ;

_decimal_lit : _decimal_digit_wo_zero { _decimal_digit } ;
_octal_lit   : '0' { _octal_digit } ;
_hex_lit     : '0' ( 'x' | 'X' ) _hex_digit { _hex_digit } ;

_decimals  : _decimal_digit { _decimal_digit } ;
_exponent  : ( 'e' | 'E' ) [ '+' | '-' ] _decimals ;

_ascii_value_rune   : _ascii_char | '"'  | '`'  | _escaped_char ;
_ascii_value_string : _ascii_char | '\'' | '`'  | _escaped_char ;
_byte_value         : _octal_byte_value | _hex_byte_value ;
_octal_byte_value   : '\\' _octal_digit _octal_digit _octal_digit ;
_hex_byte_value     : '\\' 'x' _hex_digit _hex_digit ;
_escaped_char       : '\\' ( 'a' | 'b' | 'f' | 'n' | 'r' | 't' | 'v' | '\\' | '"' | '\'' ) ;

_raw_string_lit         : '`' { _ascii_char | '"' | '\'' | _newline } '`' ;
_interpreted_string_lit : '"' { _ascii_value_string | _byte_value } '"' ;

/* Lexical Part */

keyword_break      : 'b' 'r' 'e' 'a' 'k' ;
keyword_default    : 'd' 'e' 'f' 'a' 'u' 'l' 't' ;
keyword_func       : 'f' 'u' 'n' 'c' ;
keyword_interface  : 'i' 'n' 't' 'e' 'r' 'f' 'a' 'c' 'e' ;
keyword_case       : 'c' 'a' 's' 'e' ;
keyword_defer      : 'd' 'e' 'f' 'e' 'r' ;
keyword_map        : 'm' 'a' 'p' ;
keyword_struct     : 's' 't' 'r' 'u' 'c' 't' ;
keyword_else       : 'e' 'l' 's' 'e' ;
keyword_goto       : 'g' 'o' 't' 'o' ;
keyword_package    : 'p' 'a' 'c' 'k' 'a' 'g' 'e' ;
keyword_switch     : 's' 'w' 'i' 't' 'c' 'h' ;
keyword_const      : 'c' 'o' 'n' 's' 't' ;
keyword_fallthrough: 'f' 'a' 'l' 'l' 't' 'h' 'r' 'o' 'u' 'g' 'h' ;
keyword_if         : 'i' 'f' ;
keyword_range      : 'r' 'a' 'n' 'g' 'e' ;
keyword_type       : 't' 'y' 'p' 'e' ;
keyword_continue   : 'c' 'o' 'n' 't' 'i' 'n' 'u' 'e' ;
keyword_for        : 'f' 'o' 'r' ;
keyword_import     : 'i' 'm' 'p' 'o' 'r' 't' ;
keyword_return     : 'r' 'e' 't' 'u' 'r' 'n' ;
keyword_var        : 'v' 'a' 'r' ;

identifier         : _letter { _letter | _ascii_digit } ;

int_lit            : _decimal_lit | _octal_lit | _hex_lit ;
float_lit          : _decimals '.' [ _decimals ] [ _exponent ] | _decimals _exponent | '.' _decimals [ _exponent ] ;
rune_lit           : '\'' ( _ascii_value_rune | _byte_value ) '\'' ;
string_literal     : _raw_string_lit | _interpreted_string_lit ;

binary_op  : '|' '|' | '&' '&' | _rel_op | _add_op | _mul_op ;
_rel_op     : '=' '=' | '!' '=' | '<' | '<' '=' | '>' | '>' '=' ;
_add_op     : '+' | '-' | '|' | '^' ;
_mul_op     : '*' | '/' | '%' | '<' '<' | '>' '>' | '&' | '&' '^' ;
unary_op   : '+' | '-' | '!' | '^' | '*' | '&' ;

inc_dec_op  : '+' '+' | '-' '-' ;

_norm_assign_op : [ _add_op | _mul_op ] '=' ;
_auto_assign_op : ':' '=' ;

assign_op : _norm_assign_op | _auto_assign_op ;

spread_op : '.' '.' '.' ;

left_block_bracket : '{' ;
right_block_bracket: '}' ;
left_paren         : '(' ;
right_paren        : ')' ;
left_sq_paren      : '[' ;
right_sq_paren     : ']' ;
label_op           : ':' ;
stmt_end           : ';' ;
comma              : ',' ;
dot                : '.' ;

/* Syntax Part */

<< import "tango/src/ast" >>

SourceFile     : PackageClause stmt_end ImportDeclList TopLevelDeclList    << ast.AddNode("SourceFile", $0, $1, $2, $3) >>
               ;

PackageClause  : keyword_package PackageName                               << ast.AddNode("PackageClause", $0, $1) >>
               ;
PackageName    : identifier                                                << ast.AddNode("PackageName", $0) >>
               ;


ImportPath     : string_literal                                            << ast.AddNode("ImportPath", $0) >>
               ;
ImportSpec     : ImportPath                                                << ast.AddNode("ImportSpec", $0) >>
               | dot ImportPath                                            << ast.AddNode("ImportSpec", $0, $1) >>
               | PackageName ImportPath                                    << ast.AddNode("ImportSpec", $0, $1) >>
               ;
ImportList     : empty                                                     << ast.AddNode("ImportList") >>
               | ImportList ImportSpec stmt_end                            << ast.AddNode("ImportList", $0, $1, $2) >>
               ;

ImportDecl     : keyword_import ImportSpec                                 << ast.AddNode("ImportDecl", $0, $1) >>
               | keyword_import left_paren ImportList right_paren          << ast.AddNode("ImportDecl", $0, $1, $2, $3) >>
               ;

ImportDeclList : empty                                                     << ast.AddNode("ImportDeclList") >>
               | ImportDeclList ImportDecl stmt_end                        << ast.AddNode("ImportDeclList", $0, $1, $2) >>
               ;

TopLevelDeclList : empty                                                   << ast.AddNode("TopLevelDeclList") >>
                 | TopLevelDeclList TopLevelDecl stmt_end                  << ast.AddNode("TopLevelDeclList", $0, $1, $2) >>
                 ;

TopLevelDecl : Declaration                                                 << ast.AddNode("TopLevelDecl", $0) >>
             | FunctionDecl                                                << ast.AddNode("TopLevelDecl", $0) >>
             | MethodDecl                                                  << ast.AddNode("TopLevelDecl", $0) >>
             ;

FunctionDecl : keyword_func FunctionName Function                          << ast.AddNode("FunctionDecl", $0, $1, $2) >>
             | keyword_func FunctionName Signature                         << ast.AddNode("TopLevelDecl", $0, $1, $2) >>
             ;

FunctionName : identifier                                                  << ast.AddNode("FunctionName", $0) >>
             ;

MethodDecl : keyword_func Receiver MethodName Function                     << ast.AddNode("MethodDecl", $0, $1, $2, $3) >>
           | keyword_func Receiver MethodName Signature                    << ast.AddNode("MethodDecl", $0, $1, $2, $3) >>
           ;

Receiver : Parameters                                                      << ast.AddNode("Receiver", $0) >>
         ;


Declaration : ConstDecl                                                   << ast.AddNode("Declaration", $0) >>
            | TypeDecl                                                    << ast.AddNode("Declaration", $0) >>
            | VarDecl                                                     << ast.AddNode("Declaration", $0) >>
            ;

ConstDecl : keyword_const ConstGroup                                      << ast.AddNode("ConstDecl", $0, $1) >>
          ;

ConstGroup : ConstSpec                                                    << ast.AddNode("ConstGroup", $0) >>
           | left_paren ConstSpecList right_paren                         << ast.AddNode("ConstGroup", $0, $1, $2) >>
           ;

ConstSpecList : empty                                                     << ast.AddNode("ConstSpecList") >>
              | ConstSpecList ConstSpec stmt_end                          << ast.AddNode("ConstSpecList", $0, $1, $2) >>
              ;

ConstSpec : IdentifierList Type "=" IdentifierList             << ast.AddNode("ConstSpec", $0, $1, $2, $3) >>
          ;

IdentifierList : identifier                                               << ast.AddNode("IdentifierList", $0) >>
               | IdentifierList comma identifier                          << ast.AddNode("IdentifierList", $0, $1, $2) >>
               ;

TypeDecl  : keyword_type TypeSpecGroup                                    << ast.AddNode("TypeDecl", $0, $1) >>
          ;

TypeSpecGroup : TypeSpec                                                  << ast.AddNode("TypeSpecGroup", $0) >>
              | left_paren TypeSpecList right_paren                       << ast.AddNode("TypeSpecGroup", $0, $1, $2) >>
              ;

TypeSpecList : empty                                                      << ast.AddNode("TypeSpecList") >>
             | TypeSpecList TypeSpec stmt_end                             << ast.AddNode("TypeSpecList", $0, $1, $2) >>
             ;
TypeSpec     : AliasDecl                                                  << ast.AddNode("TypeSpec", $0) >>
             | TypeDef                                                    << ast.AddNode("TypeSpec", $0) >>
             ;

AliasDecl    : identifier "=" Type                                        << ast.AddNode("AliasDecl", $0, $1, $2) >>
             ;
TypeDef      : identifier Type                                            << ast.AddNode("TypeDef", $0, $1) >>
             ;

Type      : TypeName                                                      << ast.AddNode("Type", $0) >>
          | TypeLit                                                       << ast.AddNode("Type", $0) >>
          | left_paren Type right_paren                                   << ast.AddNode("Type", $0, $1, $2) >>
          ;

TypeName  : identifier                                                    << ast.AddNode("TypeName", $0) >>
          | QualifiedIdent                                                << ast.AddNode("TypeName", $0) >>
          ;

TypeLit   : ArrayType                                                     << ast.AddNode("TypeLit", $0) >>
          | StructType                                                    << ast.AddNode("TypeLit", $0) >>  
          | PointerType                                                   << ast.AddNode("TypeLit", $0) >>
          | FunctionType                                                  << ast.AddNode("TypeLit", $0) >>
          | InterfaceType                                                 << ast.AddNode("TypeLit", $0) >>
          | SliceType                                                     << ast.AddNode("TypeLit", $0) >>
          | MapType                                                       << ast.AddNode("TypeLit", $0) >>
          ;

ArrayType   : left_sq_paren ArrayLength right_sq_paren ElementType        << ast.AddNode("ArrayType", $0, $1, $2, $3) >>
            ;

ArrayLength : Expression                                                  << ast.AddNode("ArrayLength", $0) >>
            ;

ElementType : Type                                                        << ast.AddNode("ElementType", $0) >>
            ;

SliceType : left_sq_paren right_sq_paren ElementType                      << ast.AddNode("SliceType", $0, $1, $2) >>
          ;

StructType    : keyword_struct left_block_bracket FieldDeclList right_block_bracket << ast.AddNode("StructType", $0, $1, $2, $3) >>
              ;

FieldDeclList : empty                                                     << ast.AddNode("FieldDeclList") >>
              | FieldDeclList FieldDecl stmt_end                          << ast.AddNode("FieldDeclList", $0, $1, $2) >>
              ;

FieldDecl     : IdentifierList Type                                      << ast.AddNode("FieldDecl", $0, $1) >>
              | EmbeddedField                                            << ast.AddNode("FieldDecl", $0) >>
              ;

EmbeddedField : "*" TypeName                                             << ast.AddNode("EmbeddedField", $0, $1) >>
              | TypeName                                                 << ast.AddNode("EmbeddedField", $0) >>
              ;

PointerType : "*" BaseType                                               << ast.AddNode("PointerType", $0, $1) >>
            ;

BaseType    : Type                                                       << ast.AddNode("BaseType", $0) >>
            ;

FunctionType   : keyword_func Signature                                  << ast.AddNode("FunctionType", $0, $1) >>
               ;

Signature      : Parameters ParametersList Result                        << ast.AddNode("Signature", $0, $1, $2) >>
               | Parameters ParametersList                               << ast.AddNode("Signature", $0, $1) >>
               ;

ParametersList : empty                                                   << ast.AddNode("ParametersList") >>
               | ParametersList Parameters                               << ast.AddNode("ParametersList", $0, $1) >>
               ;

Result         : Type                                                    << ast.AddNode("Result", $0) >>
               ;

Parameters     : left_paren ParameterList comma right_paren              << ast.AddNode("Parameters", $0, $1, $2, $3) >>
               | left_paren ParameterList right_paren                    << ast.AddNode("Parameters", $0, $1, $2) >>
               | left_paren right_paren                                  << ast.AddNode("Parameters", $0, $1) >>
               ;

ParameterList  : ParameterDecl                                           << ast.AddNode("ParameterList", $0) >>
               | ParameterList comma ParameterDecl                       << ast.AddNode("ParameterList", $0, $1, $2) >>
               ;

ParameterDecl  : Type                                                    << ast.AddNode("ParameterDecl", $0) >>
               | spread_op Type                                          << ast.AddNode("ParameterDecl", $0, $1) >>
               | IdentifierList Type                                     << ast.AddNode("ParameterDecl", $0, $1) >>
               | IdentifierList spread_op Type                           << ast.AddNode("ParameterDecl", $0, $1, $2) >>
               ;

InterfaceType      : keyword_interface left_block_bracket MethodSpecList right_block_bracket << ast.AddNode("InterfaceType", $0, $1, $2, $3) >>
                   ;

MethodSpecList : empty                                                   << ast.AddNode("MethodSpecList") >>
               | MethodSpecList MethodSpec stmt_end                      << ast.AddNode("MethodSpecList", $0, $1, $2) >>
               ;

MethodSpec         : MethodName Signature                                << ast.AddNode("MethodSpec", $0, $1) >>
                   | InterfaceTypeName                                   << ast.AddNode("MethodSpec", $0) >>
                   ;

MethodName         : identifier                                          << ast.AddNode("MethodName", $0) >>
                   ;

InterfaceTypeName  : TypeName                                            << ast.AddNode("InterfaceTypeName", $0) >>
                   ;

MapType     : keyword_map left_sq_paren KeyType right_sq_paren ElementType << ast.AddNode("MapType", $0, $1, $2, $3, $4) >>
            ;

KeyType     : Type                                                       << ast.AddNode("KeyType", $0) >>
            ;

QualifiedIdent : PackageName dot identifier                              << ast.AddNode("QualifiedIdent", $0, $1, $2) >>
               ;

VarDecl     : keyword_var VarSpec                                        << ast.AddNode("VarDecl", $0, $1) >>
            | keyword_var left_paren VarSpecList right_paren             << ast.AddNode("VarDecl", $0, $1, $2, $3) >>
            ;

VarSpecList : empty                                                     << ast.AddNode("VarSpecList") >>
            | VarSpecList VarSpec stmt_end                              << ast.AddNode("VarSpecList", $0, $1, $2) >>
            ;

VarSpec     : IdentifierList ExpressionListGroup                        << ast.AddNode("VarSpec", $0, $1) >>
            ;

ExpressionListGroup : Type                                              << ast.AddNode("ExpressionListGroup", $0) >>
                    | Type "=" ExpressionList                           << ast.AddNode("ExpressionListGroup", $0, $1, $2) >>
                    | "=" ExpressionList                                << ast.AddNode("ExpressionListGroup", $0, $1) >>
                    ;

Operand     : Literal                                                   << ast.AddNode("Operand", $0) >>
            | OperandName                                               << ast.AddNode("Operand", $0) >>
            | MethodExpr                                                << ast.AddNode("Operand", $0) >>
            | left_paren Expression right_paren                         << ast.AddNode("Operand", $0, $1, $2) >>
            ;

OperandName : identifier                                                << ast.AddNode("OperandName", $0) >>
            | QualifiedIdent                                            << ast.AddNode("OperandName", $0) >>
            ;

Literal     : BasicLit                                                  << ast.AddNode("Literal", $0) >>
            | CompositeLit                                              << ast.AddNode("Literal", $0) >>
            | FunctionLit                                               << ast.AddNode("Literal", $0) >>
            ;

BasicLit    : int_lit                                                   << ast.AddNode("BasicLit", $0) >>
            | float_lit                                                 << ast.AddNode("BasicLit", $0) >>
            | rune_lit                                                  << ast.AddNode("BasicLit", $0) >>
            | string_literal                                            << ast.AddNode("BasicLit", $0) >>
            ;

CompositeLit : LiteralType LiteralValue                                 << ast.AddNode("CompositeLit", $0, $1) >>
             ;

LiteralType : StructType                                                << ast.AddNode("LiteralType", $0) >>
            | ArrayType                                                 << ast.AddNode("LiteralType", $0) >>
            | left_sq_paren spread_op right_sq_paren ElementType        << ast.AddNode("LiteralType", $0, $1, $2, $3) >>
            | SliceType                                                 << ast.AddNode("LiteralType", $0) >>
            | MapType                                                   << ast.AddNode("LiteralType", $0) >>
            | TypeName                                                  << ast.AddNode("LiteralType", $0) >>
            ;
LiteralValue : left_block_bracket right_block_bracket                   << ast.AddNode("LiteralValue", $0, $1) >>
             | left_block_bracket ElementList right_block_bracket       << ast.AddNode("LiteralValue", $0, $1, $2) >>
             | left_block_bracket ElementList comma right_block_bracket << ast.AddNode("LiteralValue", $0, $1, $2, $3) >>
             ;

ElementList : KeyedElement                                              << ast.AddNode("ElementList", $0) >>
            | ElementList comma KeyedElement                            << ast.AddNode("ElementList", $0, $1, $2) >>
            ;

KeyedElement : Element                                                  << ast.AddNode("KeyedElement", $0) >>
             | Key label_op Element                                     << ast.AddNode("KeyedElement", $0, $1, $2) >>
             ;

Key          : FieldName                                                << ast.AddNode("Key", $0) >>
             | Expression                                               << ast.AddNode("Key", $0) >>
             | LiteralValue                                             << ast.AddNode("Key", $0) >>
             ;

FieldName    : identifier                                               << ast.AddNode("FieldName", $0) >>
             ;

Element      : Expression                                               << ast.AddNode("Element", $0) >>
             | LiteralValue                                             << ast.AddNode("Element", $0) >>
             ;

FunctionLit  : keyword_func Function                                    << ast.AddNode("FunctionLit", $0, $1) >>
             ;

Function     : Signature FunctionBody                                   << ast.AddNode("Function", $0, $1) >>
             ;

FunctionBody : Block                                                    << ast.AddNode("FunctionBody", $0) >>
             ;

Block        : left_block_bracket StatementList right_block_bracket     << ast.AddNode("Block", $0, $1, $2) >>
             ;

StatementList : empty                                                   << ast.AddNode("StatementList") >>
              | StatementList Statement stmt_end                        << ast.AddNode("StatementList", $0, $1, $2) >>
              ;

Statement    : Declaration                                              << ast.AddNode("Statement", $0) >>
             | LabeledStmt                                              << ast.AddNode("Statement", $0) >>
             | SimpleStmt                                               << ast.AddNode("Statement", $0) >>
             | ReturnStmt                                               << ast.AddNode("Statement", $0) >>
             | BreakStmt                                                << ast.AddNode("Statement", $0) >>
             | ContinueStmt                                             << ast.AddNode("Statement", $0) >>
             | GotoStmt                                                 << ast.AddNode("Statement", $0) >>
             | FallthroughStmt                                          << ast.AddNode("Statement", $0) >>
             | Block                                                    << ast.AddNode("Statement", $0) >>
             | IfStmt                                                   << ast.AddNode("Statement", $0) >>
             | SwitchStmt                                               << ast.AddNode("Statement", $0) >>
             | ForStmt                                                  << ast.AddNode("Statement", $0) >>
             | DeferStmt                                                << ast.AddNode("Statement", $0) >>
             ;

LabeledStmt : Label label_op Statement                                  << ast.AddNode("LabeledStmt", $0, $1, $2) >>
            ;
Label       : identifier                                                << ast.AddNode("Label", $0) >>
            ;

SimpleStmt : EmptyStmt                                                  << ast.AddNode("SimpleStmt", $0) >>
           | ExpressionStmt                                             << ast.AddNode("SimpleStmt", $0) >>
           | IncDecStmt                                                 << ast.AddNode("SimpleStmt", $0) >>
           | Assignment                                                 << ast.AddNode("SimpleStmt", $0) >>
           | ShortVarDecl                                               << ast.AddNode("SimpleStmt", $0) >>
           ;

EmptyStmt : empty                                                       << ast.AddNode("EmptyStmt") >>
          ;

ExpressionStmt : Expression                                             << ast.AddNode("ExpressionStmt", $0) >>
               ;

IncDecStmt : Expression inc_dec_op                                      << ast.AddNode("IncDecStmt", $0, $1) >>
           ;

Assignment : ExpressionList assign_op ExpressionList                    << ast.AddNode("Assignment", $0, $1, $2) >>
           ;

ShortVarDecl : IdentifierList ":=" ExpressionList                       << ast.AddNode("ShortVarDecl", $0, $1, $2) >>
             ;

ReturnStmt : keyword_return                                             << ast.AddNode("ReturnStmt", $0) >>
           | keyword_return ExpressionList                              << ast.AddNode("ReturnStmt", $0, $1) >>
           ;

BreakStmt  : keyword_break                                              << ast.AddNode("BreakStmt", $0) >>
           | keyword_break Label                                        << ast.AddNode("BreakStmt", $0, $1) >>
           ;

ContinueStmt : keyword_continue                                         << ast.AddNode("ContinueStmt", $0) >>
             | keyword_continue Label                                   << ast.AddNode("ContinueStmt", $0, $1) >>
             ;

GotoStmt : keyword_goto Label                                           << ast.AddNode("GotoStmt", $0, $1) >>
         ;

FallthroughStmt : keyword_fallthrough                                   << ast.AddNode("FallthroughStmt", $0) >>
                ;

IfStmt : keyword_if Expression Block                                    << ast.AddNode("IfStmt", $0, $1, $2) >>
       | keyword_if SimpleStmt stmt_end Expression Block                << ast.AddNode("IfStmt", $0, $1, $2, $3, $4) >>
       | keyword_if Expression Block keyword_else IfStmtGrp             << ast.AddNode("IfStmt", $0, $1, $2, $3, $4) >>
       | keyword_if SimpleStmt stmt_end Expression Block keyword_else IfStmtGrp << ast.AddNode("IfStmt", $0, $1, $2, $3, $4, $5, $6) >>
       ;

IfStmtGrp : IfStmt                                                                         << ast.AddNode("IfStmtGrp", $0) >>
          | Block                                                                          << ast.AddNode("IfStmtGrp", $0) >>
          ;

SwitchStmt : ExprSwitchStmt                                                                << ast.AddNode("SwitchStmt", $0) >>
           ;

ExprSwitchStmt : keyword_switch left_block_bracket ExprCaseClauseList right_block_bracket  << ast.AddNode("ExprSwitchStmt", $0, $1, $2, $3) >>     
               | keyword_switch SimpleStmt stmt_end left_block_bracket ExprCaseClauseList right_block_bracket << ast.AddNode("ExprSwitchStmt", $0, $1, $2, $3, $4, $5) >>
               | keyword_switch Expression left_block_bracket ExprCaseClauseList right_block_bracket << ast.AddNode("ExprSwitchStmt", $0, $1, $2, $3, $4) >>
               | keyword_switch SimpleStmt stmt_end Expression left_block_bracket ExprCaseClauseList right_block_bracket << ast.AddNode("ExprSwitchStmt", $0, $1, $2, $3, $4, $5, $6) >>
               ;

ExprCaseClauseList : empty                                                                 << ast.AddNode("ExprCaseClauseList") >>
                   | ExprCaseClauseList ExprCaseClause                                     << ast.AddNode("ExprCaseClauseList", $0, $1) >>
                   ;

ExprCaseClause : ExprSwitchCase label_op StatementList                                     << ast.AddNode("ExprCaseClause", $0, $1, $2) >>
               ;

ExprSwitchCase : keyword_case ExpressionList                                               << ast.AddNode("ExprSwitchCase", $0, $1) >>
               | keyword_default                                                           << ast.AddNode("ExprSwitchCase", $0) >>
               ;

ForStmt : keyword_for Block                                                                << ast.AddNode("ForStmt", $0, $1) >>
        | keyword_for ConditionGrp Block                                                   << ast.AddNode("ForStmt", $0, $1, $2) >>
        ;

ConditionGrp : Condition                                                                   << ast.AddNode("ConditionGrp", $0) >>
             | ForClause                                                                   << ast.AddNode("ConditionGrp", $0) >>
             | RangeClause                                                                 << ast.AddNode("ConditionGrp", $0) >>
             ;

Condition : Expression                                                                     << ast.AddNode("Condition", $0) >>
          ;

ForClause : stmt_end stmt_end                                                              << ast.AddNode("ForClause", $0, $1) >>
          | InitStmt stmt_end stmt_end                                                     << ast.AddNode("ForClause", $0, $1, $2) >>
          | stmt_end Condition stmt_end                                                    << ast.AddNode("ForClause", $0, $1, $2) >>
          | stmt_end stmt_end PostStmt                                                     << ast.AddNode("ForClause", $0, $1, $2) >>
          | InitStmt stmt_end Condition stmt_end                                           << ast.AddNode("ForClause", $0, $1, $2, $3) >>
          | stmt_end Condition stmt_end PostStmt                                           << ast.AddNode("ForClause", $0, $1, $2, $3) >>
          | InitStmt stmt_end stmt_end PostStmt                                            << ast.AddNode("ForClause", $0, $1, $2, $3) >>
          | InitStmt stmt_end Condition stmt_end PostStmt                                  << ast.AddNode("ForClause", $0, $1, $2, $3, $4) >>
          ;

InitStmt : SimpleStmt                                                                      << ast.AddNode("InitStmt", $0) >>
         ;

PostStmt : SimpleStmt                                                                      << ast.AddNode("PostStmt", $0) >>
         ;

RangeClause : keyword_range Expression                                                     << ast.AddNode("RangeClause", $0, $1) >>
            | ExpressionList "=" keyword_range Expression                                  << ast.AddNode("RangeClause", $0, $1, $2, $3) >>
            | IdentifierList ":=" keyword_range Expression                                 << ast.AddNode("RangeClause", $0, $1, $2, $3) >>
            ;

DeferStmt : keyword_defer Expression                                                       << ast.AddNode("DeferStmt", $0, $1) >>
          ;

ExpressionList : Expression                                                                << ast.AddNode("ExpressionList", $0) >>
               | ExpressionList comma Expression                                           << ast.AddNode("ExpressionList", $0, $1, $2) >>
               ;

Expression : UnaryExpr                                                                     << ast.AddNode("Expression", $0) >>
           | Expression binary_op Expression                                               << ast.AddNode("Expression", $0, $1, $2) >>
           ;

UnaryExpr : PrimaryExpr                                                                    << ast.AddNode("UnaryExpr", $0) >>
          | unary_op UnaryExpr                                                             << ast.AddNode("UnaryExpr", $0, $1) >>
          ;

PrimaryExpr : Operand                                                                      << ast.AddNode("PrimaryExpr", $0) >>
            | Conversion                                                                   << ast.AddNode("PrimaryExpr", $0) >>
            | ForCompExpr                                                                  << ast.AddNode("PrimaryExpr", $0) >>
            | PrimaryExpr Selector                                                         << ast.AddNode("PrimaryExpr", $0, $1) >>
            | PrimaryExpr Index                                                            << ast.AddNode("PrimaryExpr", $0, $1) >>
            | PrimaryExpr Slice                                                            << ast.AddNode("PrimaryExpr", $0, $1) >>
            | PrimaryExpr TypeAssertion                                                    << ast.AddNode("PrimaryExpr", $0, $1) >>
            | PrimaryExpr Arguments                                                        << ast.AddNode("PrimaryExpr", $0, $1) >>
            ;

Conversion : Type left_paren Expression right_paren                                        << ast.AddNode("Conversion", $0, $1, $2, $3) >>
           | Type left_paren Expression comma right_paren                                  << ast.AddNode("Conversion", $0, $1, $2, $3, $4) >>
           ;

MethodExpr : ReceiverType dot MethodName                                                   << ast.AddNode("MethodExpr", $0, $1, $2) >>
           ;

ReceiverType : TypeName                                                                    << ast.AddNode("ReceiverType", $0) >>
             | left_paren "*" TypeName right_paren                                         << ast.AddNode("ReceiverType", $0, $1, $2, $3) >>
             | left_paren ReceiverType right_paren                                         << ast.AddNode("ReceiverType", $0, $1, $2) >>
             ;

ForCompExpr : left_sq_paren Expression "|" RangeClause right_sq_paren                      << ast.AddNode("ForCompExpr", $0, $1, $2, $3, $4) >>
            ;

Selector : dot identifier                                                                  << ast.AddNode("Selector", $0, $1) >>
         ;

Index : left_sq_paren Expression right_sq_paren                                            << ast.AddNode("Index", $0, $1, $2) >>
      ;

Slice : left_sq_paren label_op right_sq_paren                                              << ast.AddNode("Slice", $0, $1, $2) >>
      | left_sq_paren Expression label_op right_sq_paren                                   << ast.AddNode("Slice", $0, $1, $2, $3) >>
      | left_sq_paren label_op Expression right_sq_paren                                   << ast.AddNode("Slice", $0, $1, $2, $3) >>
      | left_sq_paren Expression label_op Expression right_sq_paren                        << ast.AddNode("Slice", $0, $1, $2, $3, $4) >>
      | left_sq_paren label_op Expression label_op Expression right_sq_paren               << ast.AddNode("Slice", $0, $1, $2, $3, $4, $5) >>
      | left_sq_paren Expression label_op Expression label_op Expression right_sq_paren    << ast.AddNode("Slice", $0, $1, $2, $3, $4, $5, $6) >>
      ;

TypeAssertion : dot left_paren Type right_paren                                            << ast.AddNode("TypeAssertion", $0, $1, $2, $3) >>
              ;

Arguments : left_paren right_paren                                                         << ast.AddNode("Arguments", $0, $1) >>
          | left_paren ArgInnerGroup right_paren                                           << ast.AddNode("Arguments", $0, $1, $2) >>
          ;

ArgInnerGroup : ExpressionList                                                             << ast.AddNode("ArgInnerGroup", $0) >>
              | ExpressionList spread_op                                                   << ast.AddNode("ArgInnerGroup", $0, $1) >>
              | ExpressionList comma                                                       << ast.AddNode("ArgInnerGroup", $0, $1) >>
              | ExpressionList spread_op comma                                             << ast.AddNode("ArgInnerGroup", $0, $1, $2) >>
              | Type                                                                       << ast.AddNode("ArgInnerGroup", $0) >>
              | Type spread_op                                                             << ast.AddNode("ArgInnerGroup", $0, $1) >>
              | Type comma                                                                 << ast.AddNode("ArgInnerGroup", $0, $1) >>
              | Type spread_op comma                                                       << ast.AddNode("ArgInnerGroup", $0, $1, $2) >>
              | Type comma ExpressionList                                                  << ast.AddNode("ArgInnerGroup", $0, $1, $2) >>
              | Type comma ExpressionList spread_op                                        << ast.AddNode("ArgInnerGroup", $0, $1, $2, $3) >>
              | Type comma ExpressionList comma                                            << ast.AddNode("ArgInnerGroup", $0, $1, $2, $3) >>
              | Type comma ExpressionList spread_op comma                                  << ast.AddNode("ArgInnerGroup", $0, $1, $2, $3, $4) >>
              ;
